This program performs Abstract Interpretation with given abstract domain.
It implements transfer function using Bilateral algorithm for an arbitrary 
domain built from interval predicates.
It also implement transfer function for disjoint domains when the given
domain has disjoint elements.
It takes as input the class and method to be analyzed, the description
of abstract domain in specified interval format and whether to use maximal
block information (call symbolic state in the code).

To compile:
Use Java 7 and have Z3 built with Java 7 too.
Add to your classpath the following jars:
soot-trunk.jar
com.microsoft.z3.jar
antlr-4.1-complete.jar

To run:
Make sure to add DYLD_LIBRARY_PATH
to directory where Z3 was build
Add the location of the files to analyze to
the classpath also together with the above jar files.
java disjoint.driver.StartAnalysis className methodID domainFile useMaximalBlock

For example to run 2nd method in Base64.java provided in artifacts with maximal block enabled:
java disjoint.driver.StartAnalysis Base64 2 ./domains/dom5_4.txt sY

It will produce the following output to stdout

****************************************************************************************
Running analysis for ./domains/dom5_4.txt_sY
Domain provided: 
 [7 : disjoint : [[X<5X>=2], [X=-1], [X=1], [X=0], [X>-5X<=-2], [X<=-5], [X>=5]]]
Soot started on Wed Mar 23 15:33:49 MDT 2016
Transforming Base64... 
analyzing <Base64: byte[] getBytes(java.math.BigInteger,int)>
Base64	<Base64: byte[] getBytes(java.math.BigInteger,int)>	 Done in 846

3 $i4 = i0 + 7:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i4->(or (and (< $i4 5) (>= $i4 2))
    (= $i4 (- 1))
    (= $i4 1)
    (= $i4 0)
    (and (> $i4 (- 5)) (<= $i4 (- 2)))
    (<= $i4 (- 5))
    (>= $i4 5))
4 $i5 = $i4 >> 3:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i5->(or (and (< $i5 5) (>= $i5 2))
    (= $i5 (- 1))
    (= $i5 1)
    (= $i5 0)
    (and (> $i5 (- 5)) (<= $i5 (- 2)))
    (<= $i5 (- 5))
    (>= $i5 5))
5 i17 = $i5 << 3:<Base64: byte[] getBytes(java.math.BigInteger,int)>

i17->(or (= i17 0) (<= i17 (- 5)) (>= i17 5))
6 $i6 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>():<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i6->(or (and (< $i6 5) (>= $i6 2))
    (= $i6 (- 1))
    (= $i6 1)
    (= $i6 0)
    (and (> $i6 (- 5)) (<= $i6 (- 2)))
    (<= $i6 (- 5))
    (>= $i6 5))
7 if i17 >= $i6 goto r1 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>():<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i6->(or (and (< $i6 5) (>= $i6 2))
    (= $i6 (- 1))
    (= $i6 1)
    (= $i6 0)
    (and (> $i6 (- 5)) (<= $i6 (- 2)))
    (<= $i6 (- 5))
    (>= $i6 5))
i17->(or (= i17 0) (<= i17 (- 5)) (>= i17 5))
$i6f->(or (and (< $i6 5) (>= $i6 2))
    (= $i6 (- 1))
    (= $i6 1)
    (= $i6 0)
    (and (> $i6 (- 5)) (<= $i6 (- 2)))
    (<= $i6 (- 5))
    (>= $i6 5))
i17f->(or (= i17 0) (<= i17 (- 5)) (>= i17 5))
12 $i7 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>():<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i7->(or (and (< $i7 5) (>= $i7 2))
    (= $i7 (- 1))
    (= $i7 1)
    (= $i7 0)
    (and (> $i7 (- 5)) (<= $i7 (- 2)))
    (<= $i7 (- 5))
    (>= $i7 5))
13 $i8 = $i7 % 8:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i8->(or (and (< $i8 5) (>= $i8 2)) (= $i8 1) (= $i8 0) (>= $i8 5))
14 if $i8 == 0 goto b1 = 0:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i8->(or (and (< $i8 5) (>= $i8 2)) (= $i8 1) (>= $i8 5))
$i8f->(= $i8 0)
15 $i12 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>():<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i12->(or (and (< $i12 5) (>= $i12 2))
    (= $i12 (- 1))
    (= $i12 1)
    (= $i12 0)
    (and (> $i12 (- 5)) (<= $i12 (- 2)))
    (<= $i12 (- 5))
    (>= $i12 5))
16 $i15 = $i12 / 8:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i15->(or (and (< $i15 5) (>= $i15 2))
    (= $i15 (- 1))
    (= $i15 1)
    (= $i15 0)
    (and (> $i15 (- 5)) (<= $i15 (- 2)))
    (<= $i15 (- 5))
    (>= $i15 5))
17 $i16 = $i15 + 1:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i16->(or (and (< $i16 5) (>= $i16 2))
    (= $i16 (- 1))
    (= $i16 1)
    (= $i16 0)
    (and (> $i16 (- 5)) (<= $i16 (- 2)))
    (<= $i16 (- 5))
    (>= $i16 5))
18 $i14 = i17 / 8:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i14->(or (and (< $i14 5) (>= $i14 2))
    (= $i14 (- 1))
    (= $i14 1)
    (= $i14 0)
    (and (> $i14 (- 5)) (<= $i14 (- 2)))
    (<= $i14 (- 5))
    (>= $i14 5))
19 if $i16 != $i14 goto b1 = 0:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i14->(or (and (< $i14 5) (>= $i14 2))
    (= $i14 (- 1))
    (= $i14 1)
    (= $i14 0)
    (and (> $i14 (- 5)) (<= $i14 (- 2)))
    (<= $i14 (- 5))
    (>= $i14 5))
$i16->(or (and (< $i16 5) (>= $i16 2))
    (= $i16 (- 1))
    (= $i16 1)
    (= $i16 0)
    (and (> $i16 (- 5)) (<= $i16 (- 2)))
    (<= $i16 (- 5))
    (>= $i16 5))
$i14f->(or (and (< $i14 5) (>= $i14 2))
    (= $i14 (- 1))
    (= $i14 1)
    (= $i14 0)
    (and (> $i14 (- 5)) (<= $i14 (- 2)))
    (<= $i14 (- 5))
    (>= $i14 5))
$i16f->(or (and (< $i16 5) (>= $i16 2))
    (= $i16 (- 1))
    (= $i16 1)
    (= $i16 0)
    (and (> $i16 (- 5)) (<= $i16 (- 2)))
    (<= $i16 (- 5))
    (>= $i16 5))
21 b1 = 0:<Base64: byte[] getBytes(java.math.BigInteger,int)>

b1->(= b1 0)
22 i2 = lengthof r1:<Base64: byte[] getBytes(java.math.BigInteger,int)>

i2->(or (and (< i2 5) (>= i2 2))
    (= i2 (- 1))
    (= i2 1)
    (= i2 0)
    (and (> i2 (- 5)) (<= i2 (- 2)))
    (<= i2 (- 5))
    (>= i2 5))
23 $i9 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>():<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i9->(or (and (< $i9 5) (>= $i9 2))
    (= $i9 (- 1))
    (= $i9 1)
    (= $i9 0)
    (and (> $i9 (- 5)) (<= $i9 (- 2)))
    (<= $i9 (- 5))
    (>= $i9 5))
24 $i10 = $i9 % 8:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i10->(or (and (< $i10 5) (>= $i10 2)) (= $i10 1) (= $i10 0) (>= $i10 5))
25 if $i10 != 0 goto $i11 = i17 / 8:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i10->(= $i10 0)
$i10f->(or (and (< $i10 5) (>= $i10 2)) (= $i10 1) (>= $i10 5))
26 b1 = 1:<Base64: byte[] getBytes(java.math.BigInteger,int)>

b1->(= b1 1)
27 i2 = i2 + -1:<Base64: byte[] getBytes(java.math.BigInteger,int)>

i2->(or (and (< i2 5) (>= i2 2))
    (= i2 (- 1))
    (= i2 1)
    (= i2 0)
    (and (> i2 (- 5)) (<= i2 (- 2)))
    (<= i2 (- 5))
    (>= i2 5))
28 $i11 = i17 / 8:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i11->(or (and (< $i11 5) (>= $i11 2))
    (= $i11 (- 1))
    (= $i11 1)
    (= $i11 0)
    (and (> $i11 (- 5)) (<= $i11 (- 2)))
    (<= $i11 (- 5))
    (>= $i11 5))
29 i3 = $i11 - i2:<Base64: byte[] getBytes(java.math.BigInteger,int)>

i3->(or (and (< i3 5) (>= i3 2))
    (= i3 (- 1))
    (= i3 1)
    (= i3 0)
    (and (> i3 (- 5)) (<= i3 (- 2)))
    (<= i3 (- 5))
    (>= i3 5))
30 $i13 = i17 / 8:<Base64: byte[] getBytes(java.math.BigInteger,int)>

$i13->(or (and (< $i13 5) (>= $i13 2))
    (= $i13 (- 1))
    (= $i13 1)
    (= $i13 0)
    (and (> $i13 (- 5)) (<= $i13 (- 2)))
    (<= $i13 (- 5))
    (>= $i13 5))
Soot finished on Wed Mar 23 15:33:51 MDT 2016
Soot has run for 0 min. 2 sec.
****************************************************************************************


